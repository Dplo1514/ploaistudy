# -*- coding: utf-8 -*-
"""210819_numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-MZgtOItYrMQOVq-xC9AjhL4dsoWZRD1

![image.png](attachment:image.png)
# NumPy

NumPy ( Numerical Python )는 거의 모든 과학 및 공학 분야에서 사용되는 오픈 소스 파이썬 라이브러리로써, NumPy API는 Pandas, SciPy, Matplotlib, scikit-learn, scikit-image 및 대부분의 기타 데이터 과학 및 과학 파이썬 패키지에서 광범위하게 사용됨

# ⏣ 설치
"""

!pip install numpy

"""# ⏣ 임포트"""

import numpy as np

"""# ⏣ 기본 배열 만들기
numpy 배열(numpy.ndarray)을 만들기 위한 함수 : np.array(), np.zeros(), np.ones(), np.arange(), np.linspace()   
numpy 배열(numpy.ndarray) 요소(element)의 자료형 지정 및 확인 : dtype   

### 1. np.array()
"""

a = np.array ([1,2,3])
type(a)

a

"""### 2. np.zeros()"""

b=np.zeros([2,2])

b

"""### 3. np.ones()"""

a=np.ones([2,2])

a

"""### 4. np.empty()"""

a=np.empty([2,2])

a # (n,m)

np.array([1,2,3])

# empty함수는 초기화되지 않은 배열을 생성한다. 따라서 메모리의 상태에 따라서 다른 값이 나올 수 있다.

"""### 5. np.arange()"""

a=np.arange(1,10) # 범위 [start, stop)

# 범위내 증가치 적용
a

range(2,12,3)  # 파이썬의 range함수는 값이 아닌 range 객체를 반환한다.

a=range(2,12,3)

"""### 6. np.linspace()"""

# 범위 [start, stop]
a=np.linspace[1,10]

# num 인자 사용

# num의 기본값은 50이다.

"""### 7. dtype"""

a = np.array =([1,2,3])
a

b = np.array([1,2,3], dtype=np.uint64) 
b



b.dtype

"""# ⏣ 배열 요소의 추가, 제거, 정렬 및 배열 합치기
numpy 배열(numpy.ndarray) 요소(element)의 추가, 제거, 정렬 : np.append(), np.delete(), np.sort()   
numpy 배열(numpy.ndarray) 합치기 : np.concatenate()   

### 1. np.append()
"""

arr = np.array([1,2,3])
print(arr)

# 배열의 끝에 값이 추가됨

# 배열 arr 자체가 바뀌지는 않음

# 배열이 평탄화(flatten)된 후 추가됨 == 배열의 축이 없어짐 axis=None

arr1 = 
arr1

# axis=0

# axis=1
# 튜플로 추가한 경우

# 축의 방향과 배열의 shape가 맞지 않아 오류 발생

# 배열로 추가한 경우, 배열의 shape을 맞춰줘야 한다.

"""### 2. np.delete()"""

arr = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])
arr

# 인덱스가 1, 3, 5인 배열의 요소 삭제

"""### 3. np.sort()"""

arr = np.array([2,5,3,2,1,6,7,8])
arr

np.sort(arr)

np.sort(arr,axis=0) #axis=0 세로방향 1,3을 비교 2,4를 비교 후 정렬

np.sort(arr,axis=1) #axis=1 가로방향 1,4를 비교 3,2를 비교 후 정렬

"""### 4. np.concatenate()"""

a = np.array([[1,2],[3,4]]) #(2,2)
b = np.array([[5,6]])   #(1,2)
a,b

np.concatenate ((a,b) ,axis=0)

np.concatenate ((a,b.T) ,axis=1) #b :(1,2) --> (2,1) => (2,3)

"""# ⏣ 배열의 모양(shape)과 크기(size)
배열의 차원 또는 축의 수 : ndarray.ndim   
배열 요소의 총 개수 : ndarray.size   
배열의 차원에 따라 저장된 요소의 수 : ndarray.shape
"""



# 축의 수

# 모든 요소의 수

# 축 별 요소의 수

"""# ⏣ 배열의 인덱싱(indexing)과 슬라이싱(slicing)"""

data = np.array([1,2,3])

data[1] # 인덱싱 == 값

data[1:2] # 슬라이싱  == 배열

data[-3:2]

a = np.array ([[1,2,3,4] ,[5,6,7,8] ,[9,10,11,12]]) 
a

five_up = (a>5)
five_up

a[five_up]

a[(a>5) & (a<10)]

"""# ⏣ 행렬(2D 배열)의 인덱싱(indexing)에서 주의할 점
### [ , ] vs. [ ][ ]
"""

mat = np.arange(24).reshape(6,4)
mat

mat[1:5 ,0:2] # row, col로 인식하고 슬라이싱

mat [1:5][0:2]# row로 슬라이싱한 결과를 다시 row로 슬라이싱

"""# ⏣ 행렬(2D 배열)의 전치(transpose) 및 재구성(reshape)

행렬의 전치 : arr.transpose(), arr.T   
행렬의 재구성 : arr.reshape()   

"""

arr = 
arr





data = 
data





new_arr = 
new_arr

# data.shape = (6,)와 비교

"""# ⏣ 배열 평탄화

배열 평탄화 : ndarray.flatten(), ndarray.ravel()
"""

x = 
x

# ndarray.flatten()은 원래 배열의 사본을 반환



# ndarray.ravel()은 원래 배열의 뷰(view)를 반환. 뷰를 수정하면 원본도 수정된다.

"""# ⏣ 기본 배열 연산 : 사칙연산"""

data = np.array([1,2])
ones = np.ones([2])

data+ones

"""# ⏣ 브로드캐스팅(Broadcasting)"""

data *1.2



"""# ⏣ 유용한 배열 연산들
maximum, minimum, sum, mean, product, standard deviation 등등
"""

import random

a = np.random.random_sapmle((3,4))
a













"""# ⏣ 저장, 로딩

저장 : np.save(), np.savetxt     
로딩 : np.load(), np.loadtxt
"""

a = np.array([1,2,3,4,5] , dtype=np.int64)
a

# 단일 ndarray 객체를 저장 : filename.npz로 저장
np.save('np_save' , a)
!dir

# numpy.ndarray 객체를 저장한 filename.npy를 로딩하여 변수에 저장
b=np.load('np_save.npy')
b.dtype

# numpy.ndarray 객체를 텍스트 파일로 저장
np.savetxt('new.file.csv',a)
!dir

b= np.loadtxt('new.file.csv') # 텍스트 파일의 데이터 로딩
b.dtype

"""# 참고문헌

https://numpy.org/doc/stable/user/absolute_beginners.html
"""