# -*- coding: utf-8 -*-
"""210823 seaborn

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I4AC859Mj630u0BA1K4sryMPPfaoKmog

![image-2.png](attachment:image-2.png)

# seaborn: statistical data visualization


Seaborn은 Python에서 통계 그래픽을 만들기 위한 라이브러리로써, matplotlib를 기반으로 빌드되며 pandas 데이터 구조와 밀접하게 통합된다.

Seaborn은 데이터를 탐색하고 이해할 수 있도록 도와준다. 플로팅 기능은 전체 데이터 세트를 포함하는 데이터 프레임 및 배열에서 동작하며 정보 플롯을 만드는데 필요한 의미 체계 매핑 및 통계 집계를 내부적으로 수행한다. Seaborn API를 사용하면 **플롯의 다양한 요소가 의미하는 바에 집중**할 수 있다.




# ❦ 설치
"""

pip install seaborn

"""# ❦ 임포트"""

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
import matplotlib.pyplot as plt

# %matplotlib inline

"""# ❦ Hello world!"""

# 데이터셋 로딩
tips = sns.load_dataset("tips")

# 데이터 정보 확인

# seaborn 플롯 시각화
sns.relplot(

    
)

"""seaborn에서는 seaborn의 기본 테마를 적용할 수 있다. 이 경우, matplotlib 플롯의 모양에도 영향을 준다. 즉, seaborn에서 테마를 적용한 경우에는 seaborn을 이용하지 않고 matplotlib 플롯을 하더라도 seaborn 테마의 영향을 받는다.    

기본 테마를 지정하는 방법 말고도 몇 가지 다른 옵션들이 더 있다. 하지만, matplotlib 기본값이 마음에 들거나 다른 테마를 선호하는 경우, 이 단계를 건너뛰고 seaborn 플로팅 기능을 계속 사용할 수 있다.
"""

# 기본 테마 적용
sns.set_theme()

# 이하 코드는 위 셀의 내용을 복사할 것

"""### 코드 설명

```python
# 데이터셋 로딩
tips = sns.load_dataset("tips")
````
seaborn 소개 문서에서 대부분의 코드는 load_dataset() 함수를 이용하여 예제 데이터셋에 빠르게 액세스한다. **이 데이터셋은 판다스(pandas) 데이터프레임**이고, 대부분의 예제는 pandas 데이터 프레임을 사용하여 데이터를 지정하지만 seaborn은 판다스의 데이터 구조에 대해 매우 유연하다.


```python
# seaborn 플롯 시각화
sns.relplot(
    data=tips,
    x="total_bill", y="tip", col="time",
    hue="smoker", style="smoker", size="size",
)
````
이 플롯은 seaborn relplot() 함수에 대한 단일 호출을 사용하여 tips 데이터셋에 있는 5개의 변수 간 관계를 보여준다. 플롯에서 변수의 이름과 역할만 제공한 방법에 주목하라.  matplotlib를 직접 사용할 때와 달리 색상 값 또는 마커 코드 측면에서 플롯 요소의 속성을 지정할 필요가 없다. seaborn은 내부적으로 데이터프레임 값에서 matplotlib가 이해하는 인수로의 변환을 처리했다.   

이 선언적 접근 방식을 사용하면 matplotlib를 제어하는 방법에 대한 세부 정보가 아닌 답하려는 질문에 집중할 수 있다.

# ❦ 시각화를 통한 API 추상화 (API abstraction cross visualization)

데이터를 시각화하는 보편적으로 가장 좋은 방법은 없다. 하지만 Seaborn을 사용하면 일관된 **데이터셋 지향(dataset-oriented) API**를 이용하여 다양한 시각적 표현 전환을 쉽게 할 수 있다.

함수 <span style="color:red">**relplot()**</span>도 다양한 통계적 관계를 시각화하도록 설계되었기 때문에 그러한 방식으로 명명된 것이다. 예를들어, 산점도(scatter)는 종종 효과적이지만 하나의 **변수가 시간 측정을 나타내는 관계인 경우에는 선(line)이 더 잘 표현**된다. relplot()함수에는 데이터에 따라 관계 표현을 쉽게 전환할 수 있도록 **kind**라는  편리한 매개 변수가 있다.
"""

# 데이터 로딩
dots = sns.load_dataset("dots")  # https://shadlenlab.columbia.edu/resources/RoitmanDataCode.html

# 데이터 속성 확인
dots.info()
dots.head()

# relplot()를 이용한 lineplot
sns.relplot(
    data=dots , kind='line' ,
    x='time' , y='firing_rate' , col='align',
    hue = 'choice' , size = 'coherence' , style = 'choice',
    facet_kws=dict(sharex = False)
)

# lineplot() 사용
sns.lineplot(data=dots , x='time' , y='firing_rate' , hue='choice')

"""# ❦ 통계적 추정 및 오차 막대

종종 단일 값보다 한 변수의 평균값에 관심이 있는 경우가 있다. seaborn은 필요한 통계 추정을 자동으로 수행하고, 통계값이 추정될 때 신뢰 구간을 계산하고 추정의 불확실성을 나타내는 오차 막대를 그린다.
"""

fmri = sns.load_dataset("fmri")  # https://github.com/mwaskom/Waskom_CerebCortex_2017

# 데이터 확인
fmri.info()
fmri.head()
set(fmri.region)

# sns.relplot()으로 데이터 시각화, kind='line'으로 지정
sns.relplot(
    data=fmri , kind = 'line' ,
    x = 'timepoint' , y='signal',
    col = 'region' , hue = 'event',
    style = 'event' 
)

"""seaborn의 통계적 추정은 단순히 통계값을 계산하여 보여주는 것을 넘어선다. 예를들어, <span style="color:red">**lmplot()**</span>을 이용하면 scatter 플롯의 기능을 넘어 선형 회귀 모델 및 불확실성을 표현할 수 있다."""

# 데이터셋 로딩
# tips 데이터로 선형모델플로팅으로 시각화
print(tips.head)
sns.lmplot(
    data = tips ,
    x = 'total_bill' , y = 'tip' , col = 'time' , hue = 'smoker'
          )

"""# ❦ 분포 정보 요약

통계 분석에는 데이터셋의 변수 분포에 대한 정보가 필요한데, <span style="color:red">**displot()**</span>은 분포 시각화에 대한 여러 접근방식을 지원한다 히스토그램과 같은 고전적인 기술과 커널 밀도 추정과 같은 계산 집약적인 접근 방식이 포함된다.
"""

# tips 데이터를 displot()로 시각화
print(tips.head())
sns.displot(
    data=tips , x ='total_bill' , col='time'
)

"""# ❦ 범주형 데이터를 위한 플롯

<span style="color:red">**catplot()**</span>을 통해 범주형 데이터를 시각화할 수 있다. 이러한 플롯은 다양한 수준의 세분화을 제공한다. 가장 정밀한 수준인 "swarm"플롯을 그려서 데이터를 관찰해보자. 이 플롯은 범주(category) 축을 따라 포인트가 겹치지 않도록 위치를 조정하는 산점도(scatter)이다.
"""

# tips 데이터를 catplot()로 시각화, kind='swarm'
sns.catplot(
    data = tips , kind ='swarm', x='day', y='total_bill' , hue='smoker')

# tips 데이터를 catplot()로 시각화, kind='violin'

sns.catplot(
    data = tips , kind ='violin', x='day', y='total_bill' , hue='smoker' , split =True)

# tips 데이터를 catplot()로 시각화, kind='bar'

sns.catplot(
    data = tips , kind ='bar', x='day', y='total_bill' , hue='smoker')

"""# ❦ 다변수 데이터셋을 위한 복합 뷰 

여러 종류의 플롯을 결합하여 데이터셋에 대한 정보 요약을 신속하게 제공한다. 

jointplot()은 단일 관계에 중점을 두며, 두 변수 간 결합 분포를 각 변수의 주변 분포와 함께 표시한다.
"""

penguins = sns.load_dataset("penguins")  # https://github.com/allisonhorst/penguins

# 데이터 속성 확인
penguins.info()
penguins.head()

# sns.jointplot()
sns.jointplot(
    data = penguins , x = 'flipper_length_mm' , y='bill_length_mm' , hue = 'species'
)

"""<span style="color:red">**pairplot()**</span>은 더 넓은 관점을 취한다. 모든 쌍 관계와 각 변수에 대한 결합 및 주변 분포를 각각 보여준다."""

# sns.pairplot()
sns.pairplot(
    data = penguins , hue = 'species'
)

"""********

# relplot()
![image.png](attachment:image.png)

두 변수간 관계를 보여주는 축 수준(axes-level) 함수를 kind 라는 파라미터를 통해 제공한다.   

- scatterplot() (with kind="scatter"; the default)
- lineplot() (with kind="line")


### Prarmeters : 
-   **x,y** : x 및 y 축의 위치를 지정하는 변수   
-   **hue** : 변수를 다양한 색상으로 그룹화   
-   **size** : 변수를 다양한 크기로 그룹화   
-   **style** : 변수를 다양한 스타일로 그룹화     
-   **data** : 입력 데이터. pandas.DataFrame, numpy.ndarray 등     
-   **row, col** : 다른 패싯에 플로팅 할 부분 집합을 정의하는 변수     
-   **palette** : 색조 의미를 매핑 할 때 사용할 색상을 선택하는 방법     
-   **sizes** : size 인자를 사용할 때 크기를 선택하는 방법을 결정하는 오브젝트. 다른 값이 이 범위 내에서 정규화되도록 사용할 최소 및 최대 크기를 지정하는 튜플     
-    **kind** : 플롯의 종류. 옵션 = {scatter, line}. 'scatter'가 기본값

## 1. kind = 'scatter' (default)
"""

# kind = "scatter"
tips = sns.load_dataset("tips")
# head()로 데이터 확인
tips.head()

print(set(tips['day']))  # hue의 인자로 사용할 day 컬럼의 데이터 종류 확인
sns.relplot(
    data = tips , x = 'total_bill' , y='tip' , hue ='day'
)

print(set(tips['time']))  # col의 인자로 사용할 time 컬럼의 데이터 종류 확인
sns.relplot(
    data = tips , x = 'total_bill' , y='tip' , hue ='day' , col='time'
)

print(set(tips['sex']))  # row의 인자로 사용할 sex 컬럼의 데이터 종류 확인
sns.relplot(
    data = tips , x = 'total_bill' , y='tip' , hue ='day' , col='time' ,row = 'sex'
)

# sizes : size라는 인자를 사용할 때, 다른 값이 이 범위 내에서 정규화되도록 
#         사용할 최소 및 최대 크기를 지정하는 튜플
sns.relplot(
    data = tips , x = 'total_bill' , y='tip' ,
    hue ='time' , col='time' , size ='size' , style = 'sex',
    palette = ['b' , 'r'] , sizes = (10,100)
)

"""#### scatterplot 함수와 비교"""

# sns.relplot(data=tips, x="total_bill", y="tip", hue="day") 와 동일하게 그릴 수 있다.
sns.scatterplot(data = tips , x='total_bill' , y='tip' , hue = 'day')

# scatterplot 함수는 여러 개의 그림을 하나의 윈도우에 그릴 수 없다. --> error
sns.scatterplot(
    data=tips, x="total_bill", y="tip", col="time",  # <-- col이라는 인수를 사용할 수 없다.
    hue="time", size="size", style="sex",
    palette=["b", "r"], sizes=(10, 100)
)

"""## 2. kind = 'line'"""

fmri = sns.load_dataset("fmri")
# head()로 데이터 확인
fmri.head()

# sns.relplot() 
# x는 timepoint, y는 signal, 색상과 스타일은 은 event, 컬럼은 region, 그래프 종류는 line으로 설정
sns.relplot(
    data = fmri , x = 'timepoint' , y = 'signal' , hue = 'event' , style = 'event' ,
    col = 'region' , kind ='line'
  )

"""#### lineplot 함수와 비교"""

sns.lineplot(
    data = fmri , x = 'timepoint' , y = 'signal' , hue = 'event' , style = 'event' ,
  )

# lineplot 함수는 여러개의 그림을 하나의 윈도우에 그릴 수 없다.  --> error
sns.lineplot(
    data=fmri, x="timepoint", y="signal", col="region",  # <-- col이라는 인수를 사용할 수 없다.
    hue="event", style="event", kind="line",
)

"""*****
# displot()
![image.png](attachment:image.png)

이 함수는 여러 서브 플롯에 걸쳐 일 변량(univariate) 또는 이변 량(bivariate) 분포를 시각화하며, kind 파라미터를 이용하여 데이터를 표현할 종류를 선택한다.  

- histplot() (with kind="hist"; the default)
- kdeplot() (with kind="kde")
- ecdfplot() (with kind="ecdf"; univariate-only)


### Parameters : 

-   **x,y** : x 및 y 축의 위치를 지정하는 변수   
-   **hue** : 변수를 다양한 색상으로 그룹화 
-   **row, col** : 다른 패싯에 플로팅 할 부분 집합을 정의하는 변수  
-   **kind** : 플롯의 종류. 옵션 = {hist, kde, ecdf}. 'hist'가 기본값
-   **height** : 각 패싯의 높이 (인치)
-   **aspect** : 각 패싯의 종횡비

## 1. kind = 'hist' (default)
히스토그램 :  표로 되어 있는 도수 분포를 정보 그림으로 나타낸 것이다. 더 간단하게 말하면, 도수분포표를 그래프로 나타낸 것이다.
![image-2.png](attachment:image-2.png)
"""

penguins = sns.load_dataset("penguins")
penguins.info()
penguins.head()
# 데이터 속성 확인

# sns.displot() : 물갈퀴 길이 히스토그램
sns.displot( data=penguins , x='flipper_length_mm'
)

# x, y축 데이터 종류 지정 (2차원 속성)
sns.displot( data=penguins , x='flipper_length_mm' , y='bill_length_mm'
)

# hue, multiple
# multiple 인자는 원래 histplot 함수의 인자이다. multiple : {“layer”, “dodge”, “stack”, “fill”}
sns.displot( data=penguins , x='flipper_length_mm' , hue = 'species',
            multiple = 'dodge'
)

"""#### histplot 함수와 비교"""

# sns.histplot() : 물갈퀴 길이 히스토그램
sns.histplot( data=penguins , x='flipper_length_mm'
)

"""## 2. kind = 'kde'
커널밀도추정(KDE, Kernel Density Estimation) : 관측 데이터들의 분포로부터 원래 변수의 확률 분포 특성을 추정하고자 하는 것이 밀도추정(density estimation)이다.   
KDE(Kernel Density Estimation)를 통해 얻은 확률밀도함수는 히스토그램 확률밀도함수를 스무딩(smoothing)한 것으로도 볼 수 있다.
![image.png](attachment:image.png)
(그림출처: https://darkpgmr.tistory.com/147)
"""

sns.displot(data=penguins, x="flipper_length_mm",
           kind = 'kde'
           )

# hue
sns.displot(data=penguins, x="flipper_length_mm",
           kind = 'kde' , hue = 'species'
           )

# x, y축 데이터 종류 지정
# hue
sns.displot(data=penguins, x="flipper_length_mm", y='bill_length_mm' ,
           kind = 'kde' , hue = 'species'
           )

# 히스토그램 모드인 경우, KDE 곡선을 추가할 수 있다.
# kde 인자는 원래 histplot 함수의 인자이다.
c

"""#### kdeplot 함수와 비교"""

sns.kdeplot(data=penguins, x="flipper_length_mm",)

"""## 3. kind = 'ecdf'
경험적 누적 분포 함수(empirical cumulative distribution function) : 반복된 시행을 통해 확률 변수가 일정 값을 넘지 않을 확률을 유추하는 함수    
서로 다른 표본들의 분포를 비교할 때 많이 사용하고, 각 집단의 백분위를 추정할 수 있다.
"""

# x는 flipper_length_mm, kind=ecdf

# 추가옵션사용 : 색상은 sex, 컬럼은 species, 그래프높이=4, 종횡비=0.7

"""#### ecdfplot 함수와 비교"""

# sns.ecdfplot()

"""******
# catplot()
![image.png](attachment:image.png)

이 함수는 숫자 변수와 하나 이상의 범주형 변수 간 관계를 보여주며, kind 파라미터를 이용하여 데이터를 표현할 종류를 선택한다.  


Categorical scatterplots:

- stripplot() (with kind="strip"; the default) 
- swarmplot() (with kind="swarm") 

Categorical distribution plots:

- boxplot() (with kind="box")
- violinplot() (with kind="violin")
- boxenplot() (with kind="boxen")

Categorical estimate plots:

- pointplot() (with kind="point")
- barplot() (with kind="bar")
- countplot() (with kind="count")


### Parameters : 

-   **x, y, hue** : x 및 y 축의 위치를 지정하는 변수 (데이터의 변수 이름)     
-   **data** : 데이터프레임
-   **row, col** : 패싯을 결정하는 범주형 변수(데이터의 변수 이름)      
-   **kind*** : 플롯의 종류. 옵션 = {strip, swarm, box, violin, boxen, point, bar, count}. 'strip'가 기본값    
-   **height** : 각 패싯의 높이 (인치)
-   **aspect** : 각 패싯의 종횡비    

"""

# sns.set_theme()
sns.set_theme(style="ticks")
exercise = sns.load_dataset("exercise")

# 데이터 속성 확인
exercise.info()
exercise.head()

# default kind
sns.catplot(
    data = exercise , x='time' , y='pulse' , hue = 'kind' 
)

# kind = swarm, box, violin, boxen, point, bar
g = sns.catplot(data = exercise , x='time' , y='pulse' , hue = 'kind' ,kind='swarm')
g = sns.catplot(data = exercise , x='time' , y='pulse' , hue = 'kind' ,kind='box')
g = sns.catplot(data = exercise , x='time' , y='pulse' , hue = 'kind' ,kind='violin')
g = sns.catplot(data = exercise , x='time' , y='pulse' , hue = 'kind' ,kind='boxen')
g = sns.catplot(data = exercise , x='time' , y='pulse' , hue = 'kind' ,kind='point')
g = sns.catplot(data = exercise , x='time' , y='pulse' , hue = 'kind' ,kind='bar')

# kind = count
g = sns.catplot(data = exercise , x='time' , hue = 'kind' ,kind='count')

# col
sns.catplot(data = exercise , x='time' , y='pulse' , hue = 'kind', col='diet')

# col, col_wrap
titanic = sns.load_dataset("titanic")
#titanic.info()
#titanic.head(10)
g = sns.catplot(
    data = titanic[titanic.deck.notnull()] , x= 'alive', col ='deck',
    kind = 'count' , height=2.5 , aspect = 0.8 ,
    col_wrap = 4 )

"""*****
# lmplot()
![image.png](attachment:image.png)

이 함수는 회귀 모델을 맞추기 위한 편리한 인터페이스를 제공한다.


### Parameters : 

-   **x, y** : 입력변수, 데이터의 열(column) 이름이어야 한다.     
-   **data** : 데이터프레임
-   **hue, row, col** : 데이터의 하위 집합을 정의하는 변수         
-   **height** : 각 패싯의 높이 (인치)
-   **aspect** : 각 패싯의 종횡비      
-   **markers** : matplotlib 마커 코드. 산점도 마커.
-   **palette** : hue를 매핑 할 때 사용할 색상을 선택
"""

tips = sns.load_dataset("tips")
tips.head()
g = sns.lmplot(
    data=tips , x='total_bill' , y='tip' 
    )

# hue

# markers

# palette

# col, col_wrap, height, aspect
g = sns.lmplot(
    data=tips , x='total_bill' , y='tip' ,col ='day' , hue ='day',
    col_wrap =2 ,height =3 , aspect = 1.3
    )

"""*****
# heatmap()
![image.png](attachment:image.png)

2D 데이터를 색상 인코딩된 행렬로 플로팅한다.


### Parameters : 

-   **data** : 2D 데이터셋
-   **vmin, vmax** : 컬러 맵을 고정할 값. 지정하지 않으면 데이터 및 기타 키워드 인수에서 유추된다.     
-   **center** :  컬러맵의 중앙에 배치할 값     
-   **annot** : True이면 각 셀에 데이터 값을 표기      
-   **fmt** : 주석을 추가할 때 사용할 문자열 포맷 코드       
-   **cmap** : 컬러맵   
"""

import numpy as np
np.random.seed(0)
uniform_data = np.random.rand(10, 12)
ax = sns.heatmap(uniform_data)

# vmin, vmax
sns.heatmap(uniform_data , vmin =0 , vmax= 1)

# center
normal_data = np.random.randn(10, 12)
sns.heatmap(uniform_data , center=0)

# annot, fmt
flights = sns.load_dataset("flights")
flights.info()
print(f'\n{flights.head()}')
flights = flights.pivot("month", "year", "passengers")
print(f'\n{flights.head()}')

sns.heatmap(flights , annot=True ,fmt ='d' )

# cmap
sns.heatmap(flights , annot=True ,fmt ='d' , cmap='YlGnBu')

"""# 참고문헌
http://seaborn.pydata.org/introduction.html   
http://seaborn.pydata.org/api.html    

"""